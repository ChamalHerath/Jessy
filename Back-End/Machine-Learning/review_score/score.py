# -*- coding: utf-8 -*-
"""rating_places&&travelGuides

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wya3gvmvZzWqOoMnemx1lb2rELBHcLZ9
"""

import pandas as pd
import numpy as np

"""#Import dataset and extarct necessary columns for the testing"""

df = pd.read_csv('https://raw.githubusercontent.com/laxmimerit/Amazon-Musical-Reviews-Rating-Dataset/master/Musical_instruments_reviews.csv' , usecols=['reviewText', 'overall'])

df.head()

df['overall'].value_counts()

"""#Install packages for the preprocess cleaning"""

# !pip install git+https://github.com/laxmimerit/preprocess_kgptalkie.git --upgrade --force-reinstall

import preprocess_kgptalkie as ps
import re

#cleaning function
def get_clean(x):
    x = str(x).lower().replace('\\', '').replace('_', ' ')
    x = ps.cont_exp(x)
    x = ps.remove_emails(x)
    x = ps.remove_urls(x)
    x = ps.remove_html_tags(x)
    x = ps.remove_rt(x)
    x = ps.remove_accented_chars(x)
    x = ps.remove_special_chars(x)
    x = re.sub("(.)\\1{2,}", "\\1", x)
    return x

#apply cleaning function
df['reviewText'] = df['reviewText'].apply(lambda x: get_clean(x))

df.head()

"""#TFIDF and Linear SVM Algorithm

"""

#libraries for the algorithm
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.svm import LinearSVC
from sklearn.metrics import classification_report

#apply algorithm for the testing
tfidf = TfidfVectorizer(max_features=20000, ngram_range=(1,5), analyzer='char')

X = tfidf.fit_transform(df['reviewText'])
Y = df['overall']

X.shape, Y.shape

#build values and parameters
X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.8, random_state = 0)

X_train.shape

#the linear SVM model
clf = LinearSVC( C = 20, class_weight="balanced")
clf.fit(X_train, Y_train)

#predictions for the test cases in the dataset
y_pred = clf.predict(X_test)

#classification report summary
print(classification_report(Y_test, y_pred))

"""#Testing for the real data from the source of example"""

#values-01
x = 'this is reaclly bad.'
x = get_clean(x)
vec = tfidf.transform([x])
clf.predict(vec)

#values-02
x = 'this is a really nice place for visit'
x = get_clean(x)
vec = tfidf.transform([x])
clf.predict(vec)

#values-03
x = 'it is not that good'
x = get_clean(x)
vec = tfidf.transform([x])
clf.predict(vec)